import PropTypes from 'prop-types';
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import Box from '@theme/box';
import BoxContent from '@theme/box/content';
import FilterBar from '@common/components/filterBar';
import StickyHeader from '@theme/table/stickyHeader';
import { QueryTable } from '@theme/QueryTable';
import transformParams from 'src/utils/transformParams';
import { useFilter, useSort } from '@common/hooks';
import { useBlocks } from '../../hooks/queries/useBlocks';
import BlocksOverview from '../blocksOverview';
import BlockFilterDropdown from './blockFilterDropdown';
import BlockRow from './blockRow';
import header from './tableHeader';
import styles from './blocks.css';

export const defaultFilters = {
  dateFrom: '',
  dateTo: '',
  height: '',
  generatorAddress: '',
};

// eslint-disable-next-line max-statements
const Blocks = () => {
  const { t } = useTranslation();
  const [params, setParams] = useState();
  const { filters, clearFilters, applyFilters } = useFilter({
    dateFrom: '',
    dateTo: '',
    height: '',
    generatorAddress: '',
  });
  const { sort, toggleSort } = useSort();
  const formatters = {
    height: (value) => `${t('Height')}: ${value}`,
    /* istanbul ignore next */
    generatorAddress: (value) => `${t('Generated by')}: ${value}`,
  };

  const applyBlockFilters = (blockFilters) => {
    applyFilters(blockFilters);
    setParams(transformParams(blockFilters));
  };

  const clearBlockFilter = (name) => {
    const filterData = {
      ...filters,
      [name]: defaultFilters[name],
    };
    setParams(transformParams(filterData));
    clearFilters([name]);
  };

  const clearAllBlockFilters = () => {
    clearFilters();
    setParams({});
  };

  const changeBlockSort = (id) => {
    const sortData = {
      ...filters,
      sort: `${id}:${sort.includes('asc') ? 'desc' : 'asc'}`,
    };
    toggleSort('id');
    setParams(transformParams(sortData));
  };

  /* istanbul ignore next */
  const loadLastBlocks = () => {
    applyBlockFilters(filters);
  };

  return (
    <div>
      <BlocksOverview t={t} />
      <Box className="blocks-container" width="full" main>
        <StickyHeader title={t('All blocks')} className={styles.header} />
        <BlockFilterDropdown filters={filters} applyFilters={applyBlockFilters} />
        <FilterBar
          {...{
            clearFilter: clearBlockFilter,
            clearAllFilters: clearAllBlockFilters,
            filters,
            formatters,
          }}
        />
        <BoxContent className={`${styles.content} block-results`}>
          <QueryTable
            showHeader
            button={{
              label: t('New blocks'),
              onClick: loadLastBlocks,
              className: styles.loadLatestBtn,
            }}
            queryHook={useBlocks}
            queryConfig={{ config: { params } }}
            row={BlockRow}
            header={header(changeBlockSort, t)}
            headerClassName={styles.tableHeader}
            currentSort={sort}
            scrollToSelector=".blocks-container"
          />
        </BoxContent>
      </Box>
    </div>
  );
};

export default Blocks;
