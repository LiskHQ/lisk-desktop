import PropTypes from 'prop-types';
import React from 'react';
import withFilters from 'src/utils/withFilters';
import Box from 'src/theme/box';
import BoxContent from 'src/theme/box/content';
import FilterBar from 'src/modules/common/components/filterBar';
import StickyHeader from 'src/theme/table/stickyHeader';
import Table from 'src/theme/table';
import BlocksOverview from '../../manager/blocksOverviewManager';
import { useBlocks } from '../../hooks/queries/useBlocks';
import BlockFilterDropdown from './blockFilterDropdown';
import BlockRow from './blockRow';
import header from './tableHeader';
import styles from './blocks.css';

const Blocks = ({
  t,
  filters,
  applyFilters,
  clearFilter,
  clearAllFilters,
  sort,
  changeSort,
}) => {
  const {
    data: blocks, error, isLoading, fetchNextPage, hasNextPage,
  } = useBlocks();
  const formatters = {
    height: (value) => `${t('Height')}: ${value}`,
    /* istanbul ignore next */
    generator: (value) => `${t('Generated by')}: ${value}`,
  };

  const handleLoadMore = () => {
    fetchNextPage();
  };

  /* istanbul ignore next */
  const loadLastBlocks = () => {
    applyFilters(filters);
  };

  return (
    <div>
      <BlocksOverview t={t} />
      <Box
        isLoading={isLoading}
        className="blocks-container"
        width="full"
        main
      >
        <StickyHeader
          title={t('All blocks')}
          button={{
            entity: 'block',
            error,
            onClick: loadLastBlocks,
            label: t('New blocks'),
          }}
          scrollToSelector=".blocks-container"
          filters={(
            <BlockFilterDropdown
              filters={filters}
              applyFilters={applyFilters}
            />
          )}
        />
        <FilterBar
          {...{
            clearFilter,
            clearAllFilters,
            filters,
            formatters,
            t,
          }}
        />
        <BoxContent className={`${styles.content} block-results`}>
          <Table
            showHeader
            data={blocks.data}
            isLoading={isLoading}
            row={BlockRow}
            loadData={handleLoadMore}
            header={header(changeSort, t)}
            headerClassName={styles.tableHeader}
            currentSort={sort}
            canLoadMore={hasNextPage}
            error={error}
          />
        </BoxContent>
      </Box>
    </div>
  );
};

Blocks.propTypes = {
  t: PropTypes.func.isRequired,
  blocks: PropTypes.shape({
    data: PropTypes.array.isRequired,
    isLoading: PropTypes.bool.isRequired,
  }).isRequired,
};

const defaultFilters = {
  dateFrom: '',
  dateTo: '',
  height: '',
  generator: '',
};
const defaultSort = 'height:desc';

export default withFilters('blocks', defaultFilters, defaultSort)(Blocks);
